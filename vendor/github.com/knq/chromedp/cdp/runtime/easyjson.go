// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package runtime

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime(in *jlexer.Lexer, out *StackTrace) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "callFrames":
			if in.IsNull() {
				in.Skip()
				out.CallFrames = nil
			} else {
				in.Delim('[')
				if out.CallFrames == nil {
					if !in.IsDelim(']') {
						out.CallFrames = make([]*CallFrame, 0, 8)
					} else {
						out.CallFrames = []*CallFrame{}
					}
				} else {
					out.CallFrames = (out.CallFrames)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *CallFrame
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(CallFrame)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.CallFrames = append(out.CallFrames, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "parent":
			if in.IsNull() {
				in.Skip()
				out.Parent = nil
			} else {
				if out.Parent == nil {
					out.Parent = new(StackTrace)
				}
				(*out.Parent).UnmarshalEasyJSON(in)
			}
		case "promiseCreationFrame":
			if in.IsNull() {
				in.Skip()
				out.PromiseCreationFrame = nil
			} else {
				if out.PromiseCreationFrame == nil {
					out.PromiseCreationFrame = new(CallFrame)
				}
				(*out.PromiseCreationFrame).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime(out *jwriter.Writer, in StackTrace) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"description\":")
		out.String(string(in.Description))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"callFrames\":")
	if in.CallFrames == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in.CallFrames {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				(*v3).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
	if in.Parent != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"parent\":")
		if in.Parent == nil {
			out.RawString("null")
		} else {
			(*in.Parent).MarshalEasyJSON(out)
		}
	}
	if in.PromiseCreationFrame != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"promiseCreationFrame\":")
		if in.PromiseCreationFrame == nil {
			out.RawString("null")
		} else {
			(*in.PromiseCreationFrame).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StackTrace) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StackTrace) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StackTrace) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StackTrace) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime1(in *jlexer.Lexer, out *SetCustomObjectFormatterEnabledParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "enabled":
			out.Enabled = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime1(out *jwriter.Writer, in SetCustomObjectFormatterEnabledParams) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"enabled\":")
	out.Bool(bool(in.Enabled))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetCustomObjectFormatterEnabledParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetCustomObjectFormatterEnabledParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetCustomObjectFormatterEnabledParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetCustomObjectFormatterEnabledParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime1(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime2(in *jlexer.Lexer, out *RunScriptReturns) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				if out.Result == nil {
					out.Result = new(RemoteObject)
				}
				(*out.Result).UnmarshalEasyJSON(in)
			}
		case "exceptionDetails":
			if in.IsNull() {
				in.Skip()
				out.ExceptionDetails = nil
			} else {
				if out.ExceptionDetails == nil {
					out.ExceptionDetails = new(ExceptionDetails)
				}
				(*out.ExceptionDetails).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime2(out *jwriter.Writer, in RunScriptReturns) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Result != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"result\":")
		if in.Result == nil {
			out.RawString("null")
		} else {
			(*in.Result).MarshalEasyJSON(out)
		}
	}
	if in.ExceptionDetails != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"exceptionDetails\":")
		if in.ExceptionDetails == nil {
			out.RawString("null")
		} else {
			(*in.ExceptionDetails).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RunScriptReturns) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RunScriptReturns) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RunScriptReturns) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RunScriptReturns) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime2(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime3(in *jlexer.Lexer, out *RunScriptParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "scriptId":
			out.ScriptID = ScriptID(in.String())
		case "executionContextId":
			out.ExecutionContextID = ExecutionContextID(in.Int64())
		case "objectGroup":
			out.ObjectGroup = string(in.String())
		case "silent":
			out.Silent = bool(in.Bool())
		case "includeCommandLineAPI":
			out.IncludeCommandLineAPI = bool(in.Bool())
		case "returnByValue":
			out.ReturnByValue = bool(in.Bool())
		case "generatePreview":
			out.GeneratePreview = bool(in.Bool())
		case "awaitPromise":
			out.AwaitPromise = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime3(out *jwriter.Writer, in RunScriptParams) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"scriptId\":")
	out.String(string(in.ScriptID))
	if in.ExecutionContextID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"executionContextId\":")
		out.Int64(int64(in.ExecutionContextID))
	}
	if in.ObjectGroup != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"objectGroup\":")
		out.String(string(in.ObjectGroup))
	}
	if in.Silent {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"silent\":")
		out.Bool(bool(in.Silent))
	}
	if in.IncludeCommandLineAPI {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"includeCommandLineAPI\":")
		out.Bool(bool(in.IncludeCommandLineAPI))
	}
	if in.ReturnByValue {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"returnByValue\":")
		out.Bool(bool(in.ReturnByValue))
	}
	if in.GeneratePreview {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"generatePreview\":")
		out.Bool(bool(in.GeneratePreview))
	}
	if in.AwaitPromise {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"awaitPromise\":")
		out.Bool(bool(in.AwaitPromise))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RunScriptParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RunScriptParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RunScriptParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RunScriptParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime3(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime4(in *jlexer.Lexer, out *RunIfWaitingForDebuggerParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime4(out *jwriter.Writer, in RunIfWaitingForDebuggerParams) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RunIfWaitingForDebuggerParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RunIfWaitingForDebuggerParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RunIfWaitingForDebuggerParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RunIfWaitingForDebuggerParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime4(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime5(in *jlexer.Lexer, out *RemoteObject) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			(out.Type).UnmarshalEasyJSON(in)
		case "subtype":
			(out.Subtype).UnmarshalEasyJSON(in)
		case "className":
			out.ClassName = string(in.String())
		case "value":
			(out.Value).UnmarshalEasyJSON(in)
		case "unserializableValue":
			(out.UnserializableValue).UnmarshalEasyJSON(in)
		case "description":
			out.Description = string(in.String())
		case "objectId":
			out.ObjectID = RemoteObjectID(in.String())
		case "preview":
			if in.IsNull() {
				in.Skip()
				out.Preview = nil
			} else {
				if out.Preview == nil {
					out.Preview = new(ObjectPreview)
				}
				(*out.Preview).UnmarshalEasyJSON(in)
			}
		case "customPreview":
			if in.IsNull() {
				in.Skip()
				out.CustomPreview = nil
			} else {
				if out.CustomPreview == nil {
					out.CustomPreview = new(CustomPreview)
				}
				(*out.CustomPreview).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime5(out *jwriter.Writer, in RemoteObject) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	(in.Type).MarshalEasyJSON(out)
	if in.Subtype != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"subtype\":")
		(in.Subtype).MarshalEasyJSON(out)
	}
	if in.ClassName != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"className\":")
		out.String(string(in.ClassName))
	}
	if (in.Value).IsDefined() {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"value\":")
		(in.Value).MarshalEasyJSON(out)
	}
	if in.UnserializableValue != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"unserializableValue\":")
		(in.UnserializableValue).MarshalEasyJSON(out)
	}
	if in.Description != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"description\":")
		out.String(string(in.Description))
	}
	if in.ObjectID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"objectId\":")
		out.String(string(in.ObjectID))
	}
	if in.Preview != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"preview\":")
		if in.Preview == nil {
			out.RawString("null")
		} else {
			(*in.Preview).MarshalEasyJSON(out)
		}
	}
	if in.CustomPreview != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"customPreview\":")
		if in.CustomPreview == nil {
			out.RawString("null")
		} else {
			(*in.CustomPreview).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RemoteObject) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RemoteObject) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RemoteObject) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RemoteObject) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime5(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime6(in *jlexer.Lexer, out *ReleaseObjectParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "objectId":
			out.ObjectID = RemoteObjectID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime6(out *jwriter.Writer, in ReleaseObjectParams) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"objectId\":")
	out.String(string(in.ObjectID))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReleaseObjectParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReleaseObjectParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReleaseObjectParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReleaseObjectParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime6(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime7(in *jlexer.Lexer, out *ReleaseObjectGroupParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "objectGroup":
			out.ObjectGroup = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime7(out *jwriter.Writer, in ReleaseObjectGroupParams) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"objectGroup\":")
	out.String(string(in.ObjectGroup))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReleaseObjectGroupParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReleaseObjectGroupParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReleaseObjectGroupParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReleaseObjectGroupParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime7(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime8(in *jlexer.Lexer, out *PropertyPreview) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "type":
			(out.Type).UnmarshalEasyJSON(in)
		case "value":
			out.Value = string(in.String())
		case "valuePreview":
			if in.IsNull() {
				in.Skip()
				out.ValuePreview = nil
			} else {
				if out.ValuePreview == nil {
					out.ValuePreview = new(ObjectPreview)
				}
				(*out.ValuePreview).UnmarshalEasyJSON(in)
			}
		case "subtype":
			(out.Subtype).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime8(out *jwriter.Writer, in PropertyPreview) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	(in.Type).MarshalEasyJSON(out)
	if in.Value != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"value\":")
		out.String(string(in.Value))
	}
	if in.ValuePreview != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"valuePreview\":")
		if in.ValuePreview == nil {
			out.RawString("null")
		} else {
			(*in.ValuePreview).MarshalEasyJSON(out)
		}
	}
	if in.Subtype != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"subtype\":")
		(in.Subtype).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PropertyPreview) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PropertyPreview) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PropertyPreview) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PropertyPreview) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime8(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime9(in *jlexer.Lexer, out *PropertyDescriptor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				if out.Value == nil {
					out.Value = new(RemoteObject)
				}
				(*out.Value).UnmarshalEasyJSON(in)
			}
		case "writable":
			out.Writable = bool(in.Bool())
		case "get":
			if in.IsNull() {
				in.Skip()
				out.Get = nil
			} else {
				if out.Get == nil {
					out.Get = new(RemoteObject)
				}
				(*out.Get).UnmarshalEasyJSON(in)
			}
		case "set":
			if in.IsNull() {
				in.Skip()
				out.Set = nil
			} else {
				if out.Set == nil {
					out.Set = new(RemoteObject)
				}
				(*out.Set).UnmarshalEasyJSON(in)
			}
		case "configurable":
			out.Configurable = bool(in.Bool())
		case "enumerable":
			out.Enumerable = bool(in.Bool())
		case "wasThrown":
			out.WasThrown = bool(in.Bool())
		case "isOwn":
			out.IsOwn = bool(in.Bool())
		case "symbol":
			if in.IsNull() {
				in.Skip()
				out.Symbol = nil
			} else {
				if out.Symbol == nil {
					out.Symbol = new(RemoteObject)
				}
				(*out.Symbol).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime9(out *jwriter.Writer, in PropertyDescriptor) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if in.Value != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"value\":")
		if in.Value == nil {
			out.RawString("null")
		} else {
			(*in.Value).MarshalEasyJSON(out)
		}
	}
	if in.Writable {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"writable\":")
		out.Bool(bool(in.Writable))
	}
	if in.Get != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"get\":")
		if in.Get == nil {
			out.RawString("null")
		} else {
			(*in.Get).MarshalEasyJSON(out)
		}
	}
	if in.Set != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"set\":")
		if in.Set == nil {
			out.RawString("null")
		} else {
			(*in.Set).MarshalEasyJSON(out)
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"configurable\":")
	out.Bool(bool(in.Configurable))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"enumerable\":")
	out.Bool(bool(in.Enumerable))
	if in.WasThrown {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"wasThrown\":")
		out.Bool(bool(in.WasThrown))
	}
	if in.IsOwn {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"isOwn\":")
		out.Bool(bool(in.IsOwn))
	}
	if in.Symbol != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"symbol\":")
		if in.Symbol == nil {
			out.RawString("null")
		} else {
			(*in.Symbol).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PropertyDescriptor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PropertyDescriptor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PropertyDescriptor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PropertyDescriptor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime9(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime10(in *jlexer.Lexer, out *ObjectPreview) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			(out.Type).UnmarshalEasyJSON(in)
		case "subtype":
			(out.Subtype).UnmarshalEasyJSON(in)
		case "description":
			out.Description = string(in.String())
		case "overflow":
			out.Overflow = bool(in.Bool())
		case "properties":
			if in.IsNull() {
				in.Skip()
				out.Properties = nil
			} else {
				in.Delim('[')
				if out.Properties == nil {
					if !in.IsDelim(']') {
						out.Properties = make([]*PropertyPreview, 0, 8)
					} else {
						out.Properties = []*PropertyPreview{}
					}
				} else {
					out.Properties = (out.Properties)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *PropertyPreview
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(PropertyPreview)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Properties = append(out.Properties, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "entries":
			if in.IsNull() {
				in.Skip()
				out.Entries = nil
			} else {
				in.Delim('[')
				if out.Entries == nil {
					if !in.IsDelim(']') {
						out.Entries = make([]*EntryPreview, 0, 8)
					} else {
						out.Entries = []*EntryPreview{}
					}
				} else {
					out.Entries = (out.Entries)[:0]
				}
				for !in.IsDelim(']') {
					var v5 *EntryPreview
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(EntryPreview)
						}
						(*v5).UnmarshalEasyJSON(in)
					}
					out.Entries = append(out.Entries, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime10(out *jwriter.Writer, in ObjectPreview) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	(in.Type).MarshalEasyJSON(out)
	if in.Subtype != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"subtype\":")
		(in.Subtype).MarshalEasyJSON(out)
	}
	if in.Description != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"description\":")
		out.String(string(in.Description))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"overflow\":")
	out.Bool(bool(in.Overflow))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"properties\":")
	if in.Properties == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v6, v7 := range in.Properties {
			if v6 > 0 {
				out.RawByte(',')
			}
			if v7 == nil {
				out.RawString("null")
			} else {
				(*v7).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
	if len(in.Entries) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"entries\":")
		if in.Entries == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Entries {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					(*v9).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ObjectPreview) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ObjectPreview) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ObjectPreview) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ObjectPreview) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime10(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime11(in *jlexer.Lexer, out *InternalPropertyDescriptor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				if out.Value == nil {
					out.Value = new(RemoteObject)
				}
				(*out.Value).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime11(out *jwriter.Writer, in InternalPropertyDescriptor) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if in.Value != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"value\":")
		if in.Value == nil {
			out.RawString("null")
		} else {
			(*in.Value).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InternalPropertyDescriptor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InternalPropertyDescriptor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InternalPropertyDescriptor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InternalPropertyDescriptor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime11(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime12(in *jlexer.Lexer, out *GetPropertiesReturns) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				in.Delim('[')
				if out.Result == nil {
					if !in.IsDelim(']') {
						out.Result = make([]*PropertyDescriptor, 0, 8)
					} else {
						out.Result = []*PropertyDescriptor{}
					}
				} else {
					out.Result = (out.Result)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *PropertyDescriptor
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(PropertyDescriptor)
						}
						(*v10).UnmarshalEasyJSON(in)
					}
					out.Result = append(out.Result, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "internalProperties":
			if in.IsNull() {
				in.Skip()
				out.InternalProperties = nil
			} else {
				in.Delim('[')
				if out.InternalProperties == nil {
					if !in.IsDelim(']') {
						out.InternalProperties = make([]*InternalPropertyDescriptor, 0, 8)
					} else {
						out.InternalProperties = []*InternalPropertyDescriptor{}
					}
				} else {
					out.InternalProperties = (out.InternalProperties)[:0]
				}
				for !in.IsDelim(']') {
					var v11 *InternalPropertyDescriptor
					if in.IsNull() {
						in.Skip()
						v11 = nil
					} else {
						if v11 == nil {
							v11 = new(InternalPropertyDescriptor)
						}
						(*v11).UnmarshalEasyJSON(in)
					}
					out.InternalProperties = append(out.InternalProperties, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "exceptionDetails":
			if in.IsNull() {
				in.Skip()
				out.ExceptionDetails = nil
			} else {
				if out.ExceptionDetails == nil {
					out.ExceptionDetails = new(ExceptionDetails)
				}
				(*out.ExceptionDetails).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime12(out *jwriter.Writer, in GetPropertiesReturns) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Result) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"result\":")
		if in.Result == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Result {
				if v12 > 0 {
					out.RawByte(',')
				}
				if v13 == nil {
					out.RawString("null")
				} else {
					(*v13).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.InternalProperties) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"internalProperties\":")
		if in.InternalProperties == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.InternalProperties {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					(*v15).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.ExceptionDetails != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"exceptionDetails\":")
		if in.ExceptionDetails == nil {
			out.RawString("null")
		} else {
			(*in.ExceptionDetails).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetPropertiesReturns) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetPropertiesReturns) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetPropertiesReturns) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetPropertiesReturns) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime12(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime13(in *jlexer.Lexer, out *GetPropertiesParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "objectId":
			out.ObjectID = RemoteObjectID(in.String())
		case "ownProperties":
			out.OwnProperties = bool(in.Bool())
		case "accessorPropertiesOnly":
			out.AccessorPropertiesOnly = bool(in.Bool())
		case "generatePreview":
			out.GeneratePreview = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime13(out *jwriter.Writer, in GetPropertiesParams) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"objectId\":")
	out.String(string(in.ObjectID))
	if in.OwnProperties {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ownProperties\":")
		out.Bool(bool(in.OwnProperties))
	}
	if in.AccessorPropertiesOnly {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"accessorPropertiesOnly\":")
		out.Bool(bool(in.AccessorPropertiesOnly))
	}
	if in.GeneratePreview {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"generatePreview\":")
		out.Bool(bool(in.GeneratePreview))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetPropertiesParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetPropertiesParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetPropertiesParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetPropertiesParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime13(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime14(in *jlexer.Lexer, out *ExecutionContextDescription) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ExecutionContextID(in.Int64())
		case "origin":
			out.Origin = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "auxData":
			(out.AuxData).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime14(out *jwriter.Writer, in ExecutionContextDescription) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.Int64(int64(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"origin\":")
	out.String(string(in.Origin))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if (in.AuxData).IsDefined() {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"auxData\":")
		(in.AuxData).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExecutionContextDescription) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExecutionContextDescription) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExecutionContextDescription) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExecutionContextDescription) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime14(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime15(in *jlexer.Lexer, out *ExceptionDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "exceptionId":
			out.ExceptionID = int64(in.Int64())
		case "text":
			out.Text = string(in.String())
		case "lineNumber":
			out.LineNumber = int64(in.Int64())
		case "columnNumber":
			out.ColumnNumber = int64(in.Int64())
		case "scriptId":
			out.ScriptID = ScriptID(in.String())
		case "url":
			out.URL = string(in.String())
		case "stackTrace":
			if in.IsNull() {
				in.Skip()
				out.StackTrace = nil
			} else {
				if out.StackTrace == nil {
					out.StackTrace = new(StackTrace)
				}
				(*out.StackTrace).UnmarshalEasyJSON(in)
			}
		case "exception":
			if in.IsNull() {
				in.Skip()
				out.Exception = nil
			} else {
				if out.Exception == nil {
					out.Exception = new(RemoteObject)
				}
				(*out.Exception).UnmarshalEasyJSON(in)
			}
		case "executionContextId":
			out.ExecutionContextID = ExecutionContextID(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime15(out *jwriter.Writer, in ExceptionDetails) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"exceptionId\":")
	out.Int64(int64(in.ExceptionID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"text\":")
	out.String(string(in.Text))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"lineNumber\":")
	out.Int64(int64(in.LineNumber))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"columnNumber\":")
	out.Int64(int64(in.ColumnNumber))
	if in.ScriptID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"scriptId\":")
		out.String(string(in.ScriptID))
	}
	if in.URL != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"url\":")
		out.String(string(in.URL))
	}
	if in.StackTrace != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"stackTrace\":")
		if in.StackTrace == nil {
			out.RawString("null")
		} else {
			(*in.StackTrace).MarshalEasyJSON(out)
		}
	}
	if in.Exception != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"exception\":")
		if in.Exception == nil {
			out.RawString("null")
		} else {
			(*in.Exception).MarshalEasyJSON(out)
		}
	}
	if in.ExecutionContextID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"executionContextId\":")
		out.Int64(int64(in.ExecutionContextID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExceptionDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExceptionDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExceptionDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExceptionDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime15(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime16(in *jlexer.Lexer, out *EventInspectRequested) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "object":
			if in.IsNull() {
				in.Skip()
				out.Object = nil
			} else {
				if out.Object == nil {
					out.Object = new(RemoteObject)
				}
				(*out.Object).UnmarshalEasyJSON(in)
			}
		case "hints":
			(out.Hints).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime16(out *jwriter.Writer, in EventInspectRequested) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"object\":")
	if in.Object == nil {
		out.RawString("null")
	} else {
		(*in.Object).MarshalEasyJSON(out)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"hints\":")
	(in.Hints).MarshalEasyJSON(out)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventInspectRequested) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventInspectRequested) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventInspectRequested) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventInspectRequested) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime16(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime17(in *jlexer.Lexer, out *EventExecutionContextsCleared) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime17(out *jwriter.Writer, in EventExecutionContextsCleared) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventExecutionContextsCleared) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventExecutionContextsCleared) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventExecutionContextsCleared) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventExecutionContextsCleared) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime17(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime18(in *jlexer.Lexer, out *EventExecutionContextDestroyed) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "executionContextId":
			out.ExecutionContextID = ExecutionContextID(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime18(out *jwriter.Writer, in EventExecutionContextDestroyed) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"executionContextId\":")
	out.Int64(int64(in.ExecutionContextID))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventExecutionContextDestroyed) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventExecutionContextDestroyed) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventExecutionContextDestroyed) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventExecutionContextDestroyed) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime18(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime19(in *jlexer.Lexer, out *EventExecutionContextCreated) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "context":
			if in.IsNull() {
				in.Skip()
				out.Context = nil
			} else {
				if out.Context == nil {
					out.Context = new(ExecutionContextDescription)
				}
				(*out.Context).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime19(out *jwriter.Writer, in EventExecutionContextCreated) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"context\":")
	if in.Context == nil {
		out.RawString("null")
	} else {
		(*in.Context).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventExecutionContextCreated) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventExecutionContextCreated) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventExecutionContextCreated) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventExecutionContextCreated) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime19(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime20(in *jlexer.Lexer, out *EventExceptionThrown) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "timestamp":
			if in.IsNull() {
				in.Skip()
				out.Timestamp = nil
			} else {
				if out.Timestamp == nil {
					out.Timestamp = new(Timestamp)
				}
				(*out.Timestamp).UnmarshalEasyJSON(in)
			}
		case "exceptionDetails":
			if in.IsNull() {
				in.Skip()
				out.ExceptionDetails = nil
			} else {
				if out.ExceptionDetails == nil {
					out.ExceptionDetails = new(ExceptionDetails)
				}
				(*out.ExceptionDetails).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime20(out *jwriter.Writer, in EventExceptionThrown) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"timestamp\":")
	if in.Timestamp == nil {
		out.RawString("null")
	} else {
		(*in.Timestamp).MarshalEasyJSON(out)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"exceptionDetails\":")
	if in.ExceptionDetails == nil {
		out.RawString("null")
	} else {
		(*in.ExceptionDetails).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventExceptionThrown) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventExceptionThrown) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventExceptionThrown) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventExceptionThrown) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime20(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime21(in *jlexer.Lexer, out *EventExceptionRevoked) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reason":
			out.Reason = string(in.String())
		case "exceptionId":
			out.ExceptionID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime21(out *jwriter.Writer, in EventExceptionRevoked) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"reason\":")
	out.String(string(in.Reason))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"exceptionId\":")
	out.Int64(int64(in.ExceptionID))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventExceptionRevoked) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventExceptionRevoked) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventExceptionRevoked) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventExceptionRevoked) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime21(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime22(in *jlexer.Lexer, out *EventConsoleAPICalled) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			(out.Type).UnmarshalEasyJSON(in)
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]*RemoteObject, 0, 8)
					} else {
						out.Args = []*RemoteObject{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v16 *RemoteObject
					if in.IsNull() {
						in.Skip()
						v16 = nil
					} else {
						if v16 == nil {
							v16 = new(RemoteObject)
						}
						(*v16).UnmarshalEasyJSON(in)
					}
					out.Args = append(out.Args, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "executionContextId":
			out.ExecutionContextID = ExecutionContextID(in.Int64())
		case "timestamp":
			if in.IsNull() {
				in.Skip()
				out.Timestamp = nil
			} else {
				if out.Timestamp == nil {
					out.Timestamp = new(Timestamp)
				}
				(*out.Timestamp).UnmarshalEasyJSON(in)
			}
		case "stackTrace":
			if in.IsNull() {
				in.Skip()
				out.StackTrace = nil
			} else {
				if out.StackTrace == nil {
					out.StackTrace = new(StackTrace)
				}
				(*out.StackTrace).UnmarshalEasyJSON(in)
			}
		case "context":
			out.Context = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime22(out *jwriter.Writer, in EventConsoleAPICalled) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	(in.Type).MarshalEasyJSON(out)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"args\":")
	if in.Args == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v17, v18 := range in.Args {
			if v17 > 0 {
				out.RawByte(',')
			}
			if v18 == nil {
				out.RawString("null")
			} else {
				(*v18).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"executionContextId\":")
	out.Int64(int64(in.ExecutionContextID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"timestamp\":")
	if in.Timestamp == nil {
		out.RawString("null")
	} else {
		(*in.Timestamp).MarshalEasyJSON(out)
	}
	if in.StackTrace != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"stackTrace\":")
		if in.StackTrace == nil {
			out.RawString("null")
		} else {
			(*in.StackTrace).MarshalEasyJSON(out)
		}
	}
	if in.Context != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"context\":")
		out.String(string(in.Context))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventConsoleAPICalled) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventConsoleAPICalled) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventConsoleAPICalled) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventConsoleAPICalled) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime22(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime23(in *jlexer.Lexer, out *EvaluateReturns) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				if out.Result == nil {
					out.Result = new(RemoteObject)
				}
				(*out.Result).UnmarshalEasyJSON(in)
			}
		case "exceptionDetails":
			if in.IsNull() {
				in.Skip()
				out.ExceptionDetails = nil
			} else {
				if out.ExceptionDetails == nil {
					out.ExceptionDetails = new(ExceptionDetails)
				}
				(*out.ExceptionDetails).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime23(out *jwriter.Writer, in EvaluateReturns) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Result != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"result\":")
		if in.Result == nil {
			out.RawString("null")
		} else {
			(*in.Result).MarshalEasyJSON(out)
		}
	}
	if in.ExceptionDetails != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"exceptionDetails\":")
		if in.ExceptionDetails == nil {
			out.RawString("null")
		} else {
			(*in.ExceptionDetails).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EvaluateReturns) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EvaluateReturns) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EvaluateReturns) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EvaluateReturns) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime23(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime24(in *jlexer.Lexer, out *EvaluateParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "expression":
			out.Expression = string(in.String())
		case "objectGroup":
			out.ObjectGroup = string(in.String())
		case "includeCommandLineAPI":
			out.IncludeCommandLineAPI = bool(in.Bool())
		case "silent":
			out.Silent = bool(in.Bool())
		case "contextId":
			out.ContextID = ExecutionContextID(in.Int64())
		case "returnByValue":
			out.ReturnByValue = bool(in.Bool())
		case "generatePreview":
			out.GeneratePreview = bool(in.Bool())
		case "userGesture":
			out.UserGesture = bool(in.Bool())
		case "awaitPromise":
			out.AwaitPromise = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime24(out *jwriter.Writer, in EvaluateParams) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"expression\":")
	out.String(string(in.Expression))
	if in.ObjectGroup != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"objectGroup\":")
		out.String(string(in.ObjectGroup))
	}
	if in.IncludeCommandLineAPI {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"includeCommandLineAPI\":")
		out.Bool(bool(in.IncludeCommandLineAPI))
	}
	if in.Silent {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"silent\":")
		out.Bool(bool(in.Silent))
	}
	if in.ContextID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"contextId\":")
		out.Int64(int64(in.ContextID))
	}
	if in.ReturnByValue {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"returnByValue\":")
		out.Bool(bool(in.ReturnByValue))
	}
	if in.GeneratePreview {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"generatePreview\":")
		out.Bool(bool(in.GeneratePreview))
	}
	if in.UserGesture {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"userGesture\":")
		out.Bool(bool(in.UserGesture))
	}
	if in.AwaitPromise {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"awaitPromise\":")
		out.Bool(bool(in.AwaitPromise))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EvaluateParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EvaluateParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EvaluateParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EvaluateParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime24(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime25(in *jlexer.Lexer, out *EntryPreview) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				if out.Key == nil {
					out.Key = new(ObjectPreview)
				}
				(*out.Key).UnmarshalEasyJSON(in)
			}
		case "value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				if out.Value == nil {
					out.Value = new(ObjectPreview)
				}
				(*out.Value).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime25(out *jwriter.Writer, in EntryPreview) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Key != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"key\":")
		if in.Key == nil {
			out.RawString("null")
		} else {
			(*in.Key).MarshalEasyJSON(out)
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"value\":")
	if in.Value == nil {
		out.RawString("null")
	} else {
		(*in.Value).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EntryPreview) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EntryPreview) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EntryPreview) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EntryPreview) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime25(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime26(in *jlexer.Lexer, out *EnableParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime26(out *jwriter.Writer, in EnableParams) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EnableParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EnableParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EnableParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EnableParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime26(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime27(in *jlexer.Lexer, out *DiscardConsoleEntriesParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime27(out *jwriter.Writer, in DiscardConsoleEntriesParams) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DiscardConsoleEntriesParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DiscardConsoleEntriesParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DiscardConsoleEntriesParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DiscardConsoleEntriesParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime27(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime28(in *jlexer.Lexer, out *DisableParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime28(out *jwriter.Writer, in DisableParams) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DisableParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DisableParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DisableParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DisableParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime28(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime29(in *jlexer.Lexer, out *CustomPreview) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "header":
			out.Header = string(in.String())
		case "hasBody":
			out.HasBody = bool(in.Bool())
		case "formatterObjectId":
			out.FormatterObjectID = RemoteObjectID(in.String())
		case "bindRemoteObjectFunctionId":
			out.BindRemoteObjectFunctionID = RemoteObjectID(in.String())
		case "configObjectId":
			out.ConfigObjectID = RemoteObjectID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime29(out *jwriter.Writer, in CustomPreview) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"header\":")
	out.String(string(in.Header))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"hasBody\":")
	out.Bool(bool(in.HasBody))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"formatterObjectId\":")
	out.String(string(in.FormatterObjectID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"bindRemoteObjectFunctionId\":")
	out.String(string(in.BindRemoteObjectFunctionID))
	if in.ConfigObjectID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"configObjectId\":")
		out.String(string(in.ConfigObjectID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CustomPreview) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CustomPreview) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CustomPreview) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CustomPreview) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime29(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime30(in *jlexer.Lexer, out *CompileScriptReturns) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "scriptId":
			out.ScriptID = ScriptID(in.String())
		case "exceptionDetails":
			if in.IsNull() {
				in.Skip()
				out.ExceptionDetails = nil
			} else {
				if out.ExceptionDetails == nil {
					out.ExceptionDetails = new(ExceptionDetails)
				}
				(*out.ExceptionDetails).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime30(out *jwriter.Writer, in CompileScriptReturns) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ScriptID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"scriptId\":")
		out.String(string(in.ScriptID))
	}
	if in.ExceptionDetails != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"exceptionDetails\":")
		if in.ExceptionDetails == nil {
			out.RawString("null")
		} else {
			(*in.ExceptionDetails).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CompileScriptReturns) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CompileScriptReturns) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CompileScriptReturns) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CompileScriptReturns) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime30(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime31(in *jlexer.Lexer, out *CompileScriptParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "expression":
			out.Expression = string(in.String())
		case "sourceURL":
			out.SourceURL = string(in.String())
		case "persistScript":
			out.PersistScript = bool(in.Bool())
		case "executionContextId":
			out.ExecutionContextID = ExecutionContextID(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime31(out *jwriter.Writer, in CompileScriptParams) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"expression\":")
	out.String(string(in.Expression))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"sourceURL\":")
	out.String(string(in.SourceURL))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"persistScript\":")
	out.Bool(bool(in.PersistScript))
	if in.ExecutionContextID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"executionContextId\":")
		out.Int64(int64(in.ExecutionContextID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CompileScriptParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CompileScriptParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CompileScriptParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CompileScriptParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime31(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime32(in *jlexer.Lexer, out *CallFunctionOnReturns) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				if out.Result == nil {
					out.Result = new(RemoteObject)
				}
				(*out.Result).UnmarshalEasyJSON(in)
			}
		case "exceptionDetails":
			if in.IsNull() {
				in.Skip()
				out.ExceptionDetails = nil
			} else {
				if out.ExceptionDetails == nil {
					out.ExceptionDetails = new(ExceptionDetails)
				}
				(*out.ExceptionDetails).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime32(out *jwriter.Writer, in CallFunctionOnReturns) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Result != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"result\":")
		if in.Result == nil {
			out.RawString("null")
		} else {
			(*in.Result).MarshalEasyJSON(out)
		}
	}
	if in.ExceptionDetails != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"exceptionDetails\":")
		if in.ExceptionDetails == nil {
			out.RawString("null")
		} else {
			(*in.ExceptionDetails).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CallFunctionOnReturns) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CallFunctionOnReturns) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CallFunctionOnReturns) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CallFunctionOnReturns) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime32(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime33(in *jlexer.Lexer, out *CallFunctionOnParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "objectId":
			out.ObjectID = RemoteObjectID(in.String())
		case "functionDeclaration":
			out.FunctionDeclaration = string(in.String())
		case "arguments":
			if in.IsNull() {
				in.Skip()
				out.Arguments = nil
			} else {
				in.Delim('[')
				if out.Arguments == nil {
					if !in.IsDelim(']') {
						out.Arguments = make([]*CallArgument, 0, 8)
					} else {
						out.Arguments = []*CallArgument{}
					}
				} else {
					out.Arguments = (out.Arguments)[:0]
				}
				for !in.IsDelim(']') {
					var v19 *CallArgument
					if in.IsNull() {
						in.Skip()
						v19 = nil
					} else {
						if v19 == nil {
							v19 = new(CallArgument)
						}
						(*v19).UnmarshalEasyJSON(in)
					}
					out.Arguments = append(out.Arguments, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "silent":
			out.Silent = bool(in.Bool())
		case "returnByValue":
			out.ReturnByValue = bool(in.Bool())
		case "generatePreview":
			out.GeneratePreview = bool(in.Bool())
		case "userGesture":
			out.UserGesture = bool(in.Bool())
		case "awaitPromise":
			out.AwaitPromise = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime33(out *jwriter.Writer, in CallFunctionOnParams) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"objectId\":")
	out.String(string(in.ObjectID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"functionDeclaration\":")
	out.String(string(in.FunctionDeclaration))
	if len(in.Arguments) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"arguments\":")
		if in.Arguments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Arguments {
				if v20 > 0 {
					out.RawByte(',')
				}
				if v21 == nil {
					out.RawString("null")
				} else {
					(*v21).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Silent {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"silent\":")
		out.Bool(bool(in.Silent))
	}
	if in.ReturnByValue {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"returnByValue\":")
		out.Bool(bool(in.ReturnByValue))
	}
	if in.GeneratePreview {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"generatePreview\":")
		out.Bool(bool(in.GeneratePreview))
	}
	if in.UserGesture {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"userGesture\":")
		out.Bool(bool(in.UserGesture))
	}
	if in.AwaitPromise {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"awaitPromise\":")
		out.Bool(bool(in.AwaitPromise))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CallFunctionOnParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CallFunctionOnParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CallFunctionOnParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CallFunctionOnParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime33(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime34(in *jlexer.Lexer, out *CallFrame) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "functionName":
			out.FunctionName = string(in.String())
		case "scriptId":
			out.ScriptID = ScriptID(in.String())
		case "url":
			out.URL = string(in.String())
		case "lineNumber":
			out.LineNumber = int64(in.Int64())
		case "columnNumber":
			out.ColumnNumber = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime34(out *jwriter.Writer, in CallFrame) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"functionName\":")
	out.String(string(in.FunctionName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"scriptId\":")
	out.String(string(in.ScriptID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"url\":")
	out.String(string(in.URL))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"lineNumber\":")
	out.Int64(int64(in.LineNumber))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"columnNumber\":")
	out.Int64(int64(in.ColumnNumber))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CallFrame) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CallFrame) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CallFrame) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CallFrame) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime34(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime35(in *jlexer.Lexer, out *CallArgument) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			(out.Value).UnmarshalEasyJSON(in)
		case "unserializableValue":
			(out.UnserializableValue).UnmarshalEasyJSON(in)
		case "objectId":
			out.ObjectID = RemoteObjectID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime35(out *jwriter.Writer, in CallArgument) {
	out.RawByte('{')
	first := true
	_ = first
	if (in.Value).IsDefined() {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"value\":")
		(in.Value).MarshalEasyJSON(out)
	}
	if in.UnserializableValue != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"unserializableValue\":")
		(in.UnserializableValue).MarshalEasyJSON(out)
	}
	if in.ObjectID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"objectId\":")
		out.String(string(in.ObjectID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CallArgument) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CallArgument) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CallArgument) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CallArgument) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime35(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime36(in *jlexer.Lexer, out *AwaitPromiseReturns) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				if out.Result == nil {
					out.Result = new(RemoteObject)
				}
				(*out.Result).UnmarshalEasyJSON(in)
			}
		case "exceptionDetails":
			if in.IsNull() {
				in.Skip()
				out.ExceptionDetails = nil
			} else {
				if out.ExceptionDetails == nil {
					out.ExceptionDetails = new(ExceptionDetails)
				}
				(*out.ExceptionDetails).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime36(out *jwriter.Writer, in AwaitPromiseReturns) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Result != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"result\":")
		if in.Result == nil {
			out.RawString("null")
		} else {
			(*in.Result).MarshalEasyJSON(out)
		}
	}
	if in.ExceptionDetails != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"exceptionDetails\":")
		if in.ExceptionDetails == nil {
			out.RawString("null")
		} else {
			(*in.ExceptionDetails).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AwaitPromiseReturns) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AwaitPromiseReturns) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AwaitPromiseReturns) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AwaitPromiseReturns) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime36(l, v)
}
func easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime37(in *jlexer.Lexer, out *AwaitPromiseParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "promiseObjectId":
			out.PromiseObjectID = RemoteObjectID(in.String())
		case "returnByValue":
			out.ReturnByValue = bool(in.Bool())
		case "generatePreview":
			out.GeneratePreview = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime37(out *jwriter.Writer, in AwaitPromiseParams) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"promiseObjectId\":")
	out.String(string(in.PromiseObjectID))
	if in.ReturnByValue {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"returnByValue\":")
		out.Bool(bool(in.ReturnByValue))
	}
	if in.GeneratePreview {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"generatePreview\":")
		out.Bool(bool(in.GeneratePreview))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AwaitPromiseParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AwaitPromiseParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5a4559bEncodeGithubComKnqChromedpCdpRuntime37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AwaitPromiseParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AwaitPromiseParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5a4559bDecodeGithubComKnqChromedpCdpRuntime37(l, v)
}
