{% import (
	"strings"
	"strconv"

	"github.com/knq/chromedp/cmd/chromedp-gen/internal"
) %}

// TypeTemplate is a template for a Typable type.
{% func TypeTemplate(t *internal.Type, prefix, suffix string, d *internal.Domain, domains []*internal.Domain, v interface{}, noExposeOverride, omitOnlyWhenOptional bool) %}{% code
	typ := prefix + t.CamelName() + suffix

	var extra []*internal.Type
	switch x := v.(type) {
	case []*internal.Type:
		extra = x
	}
%}
{%s= formatComment(t.GetDescription(), "", typ + " ") %}
type {%s= typ %} {%s= t.GoTypeDef(d, domains, extra, noExposeOverride, omitOnlyWhenOptional) %}
{% if t.Parameters == nil && t.Type != internal.TypeArray && t.Type != internal.TypeObject && t.Type != internal.TypeAny %}{%code
	gz := t.Type.GoType()
	z := gz
	if strings.Contains(z, ".") {
		z = z[strings.Index(z, ".")+1:]
	}
	z = strings.ToUpper(z[:1])+z[1:]
%}
// {%s= z %} returns the {%s= typ %} as {%s= gz %} value.
func (t {%s= typ %}) {%s= z %}() {%s= gz %} {
	return {%s= gz %}(t)
}
{% endif %}
{% if ev := t.EnumValues(); ev != nil %}{%code
	gz := t.Type.GoType()
	z := gz
	if strings.Contains(z, ".") {
		z = z[strings.Index(z, ".")+1:]
	}
	z = strings.ToUpper(z[:1])+z[1:]
%}// {%s= typ %} values.
const ({% for i, e := range ev %}{% code
	n := t.EnumValueName(e)
	val := `"` + e + `"`
	if t.Type == internal.TypeInteger && t.EnumBitMask {
		val = strconv.Itoa(1<<uint(i-1))
	} else if t.Type == internal.TypeInteger {
		val = strconv.Itoa(i+1)
	}
%}
	{%s= n %} {%s= typ %} = {%s= val %}{% endfor %}
)
{% if t.Type != internal.TypeString %}
// String returns the {%s= typ %} as string value.
func (t {%s= typ %}) String() string {
	switch t {{% for _, e := range t.EnumValues() %}
	case {%s= t.EnumValueName(e) %}:
		return "{%s= e %}"{% endfor %}
	}

	return fmt.Sprintf("{%s= typ %}(%d)", t)
}
{% endif %}

// MarshalEasyJSON satisfies easyjson.Marshaler.
func (t {%s= typ %}) MarshalEasyJSON(out *jwriter.Writer) {
	out.{%s= z %}({%s= gz %}(t))
}

// MarshalJSON satisfies json.Marshaler.
func (t {%s= typ %}) MarshalJSON() ([]byte, error) {
	return easyjson.Marshal(t)
}

// UnmarshalEasyJSON satisfies easyjson.Unmarshaler.
func (t *{%s= typ %}) UnmarshalEasyJSON(in *jlexer.Lexer) {
	switch {%s= typ %}(in.{%s= z %}()) {{% for _, e := range t.EnumValues() %}{% code
		n := t.EnumValueName(e)
%}
	case {%s= n %}:
		*t = {%s= n %}{% endfor %}

	default:
		in.AddError(errors.New("unknown {%s= typ %} value"))
	}
}

// UnmarshalJSON satisfies json.Unmarshaler.
func (t *{%s= typ %}) UnmarshalJSON(buf []byte) error {
	return easyjson.Unmarshal(buf, t)
}{% endif %}
{% if t.Extra != "" %}
{%s= t.Extra %}{% endif %}
{% endfunc %}
